import {Dropdown, DropdownMenu, DropdownItem} from '../dropdown';
import {Icon} from '../icon';
import {_$} from '../../i18n';
import {makeMenuStyles, makeFilterMenuStyles} from './styles';

const {data, trigger, filterable, fields, multiple, show} = this.get();
const { k } = this.config;
const baseMenuStyles = makeMenuStyles(k);
const classNameObj = {
    [`${k}-cascader-menu`]: true,
    [makeMenuStyles(k)]: true,
};
const getField = this.fields;

const {values, isShowed, isSelected, onSelect, toggleShowedValue} = this.value;
const Options = (data, level, loaded, parentSelected) => {
    if (!data.length) {
        if (!loaded) {
            return <Icon class={`ion-load-c ${k}-cascader-loading`} rotate />
        } else {
            return <div class={`${k}-cascader-empty`}>{_$('无数据')}</div>
        }
    }

    return data.map((item, index) => {
        const value = getField(item, 'value');
        const showed = show && isShowed(value, level);
        const selected = parentSelected && isSelected(value, level);
        const children = getField(item, 'children');

        const Item = () => {
            return (
                <DropdownItem
                    disabled={getField(item, 'disabled')}
                    class={{
                        [`${k}-cascader-option`]: true,
                        [`${k}-active`]: showed,
                        [`${k}-selected`]: selected,
                    }}
                    ev-select={onSelect.bind(null, value, level)}
                    hideOnSelect={!multiple}
                >
                    {getField(item, 'label')}
                    <Icon v-if={children}
                        class={`${k}-cascader-arrow ${k}-icon-right`}
                    /> 
                </DropdownItem>
            );
        };

        return (
            children ?
                <Dropdown
                    position={this.positionObj}
                    of="parent"
                    disabled={getField(item, 'disabled')}
                    trigger={trigger}
                    value={showed}
                    ev-$change:value={toggleShowedValue.bind(null, value, level)}
                    ev-show={this.load.bind(null, item)}
                >
                    {Item()}
                    <DropdownMenu class={classNameObj}>
                        {showed ? Options(children, level + 1, item.loaded, selected) : null}
                    </DropdownMenu>
                </Dropdown> :
                Item()
        );
    });
}

const {filter, keywords: {value: keywords}, selectByFilter, isSelectedItem} = this.filterable;
<t:super class={`${k}-cascader`}>
    <b:base-menu>
        <DropdownMenu 
            v-if={!filterable || !keywords}
            class={classNameObj}
            key="common"
        >
            {Options(data, 0, true, true)}
        </DropdownMenu>
        <DropdownMenu v-else
            key="filter"
            class={{
                [`${k}-cascader-filter`]: true,
                [baseMenuStyles]: true,
                [makeFilterMenuStyles(k)]: true,
            }}
        >
            {(() => {
                const items = filter();
                if (!items.length) return <div class={`${k}-cascader-empty`}>{_$('无匹配数据')}</div>

                return <DropdownItem v-for={items}
                    ev-select={selectByFilter.bind(null, $value)}
                    disabled={$value.disabled}
                    hideOnSelect={!multiple}
                    class={{[`${k}-selected`]: isSelectedItem($value)}}
                >
                    {(() => {
                        // highlight keywords
                        const label = $value.map(item => getField(item, 'label')).join(' / ');
                        const labels = label.split(keywords);
                        const length = labels.length; 
                        return labels.map((item, index) => {
                            const ret = [item];
                            if (index !== length - 1) {
                                ret.push(<em>{keywords}</em>);
                            }
                            return ret;
                        });
                    })()}
                </DropdownItem>
            })()} 
        </DropdownMenu>
    </b:base-menu>
</t:super>
